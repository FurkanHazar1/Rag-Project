@model OkulMevzuatChat.Models.ChatViewModel
@{
    ViewData["Title"] = "KTÜN Öğretim Yönetmeliği Chat Asistanı";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --ktun-red: #C41E3A;
            --ktun-red-light: #E53E5D;
            --ktun-red-dark: #A01729;
            --ktun-gray: #F5F5F5;
            --ktun-dark-gray: #333333;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            background: linear-gradient(rgba(196, 30, 58, 0.1), rgba(196, 30, 58, 0.1)),
                        url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1920 1080"><rect width="1920" height="1080" fill="%23f0f2f5"/><circle cx="960" cy="540" r="300" fill="%23e8eaed" opacity="0.3"/><circle cx="400" cy="200" r="150" fill="%23c41e3a" opacity="0.1"/><circle cx="1500" cy="800" r="200" fill="%23c41e3a" opacity="0.05"/></svg>');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }

        .chat-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(196, 30, 58, 0.1);
            box-shadow: 0 0 50px rgba(196, 30, 58, 0.1);
        }

        .chat-header {
            background: linear-gradient(135deg, var(--ktun-red) 0%, var(--ktun-red-dark) 100%);
            color: white;
            padding: 15px 20px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(196, 30, 58, 0.2);
            flex-shrink: 0;
            position: relative;
        }

        .header-logo {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            width: 60px;
            height: 60px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 5px;
        }

        .header-logo img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
        }

        .chat-header h1 {
            margin: 0;
            font-size: 1.6rem;
            font-weight: 600;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-left: 80px;
        }

        .chat-header .subtitle {
            font-size: 0.85rem;
            opacity: 0.9;
            margin-top: 5px;
            font-weight: 300;
        }

        .university-info {
            font-size: 0.75rem;
            opacity: 0.8;
            margin-top: 3px;
            font-weight: 300;
        }

        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-left: 10px;
            animation: pulse 2s infinite;
        }

        .status-online { 
            background: #28a745;
            box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
        }
        
        .status-offline { 
            background: #dc3545;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 25px;
            background: linear-gradient(rgba(248, 249, 250, 0.4), rgba(233, 236, 239, 0.4)),
                        url('/images/background.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            position: relative;
        }

        .chat-messages::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.02);
            pointer-events: none;
        }

        .message {
            margin-bottom: 25px;
            animation: messageSlideIn 0.4s ease-out;
            position: relative;
        }

        @@keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-user {
            display: flex;
            justify-content: flex-end;
        }

        .message-bot {
            display: flex;
            justify-content: flex-start;
        }

        .message-bubble {
            max-width: 75%;
            padding: 18px 24px;
            border-radius: 20px;
            word-wrap: break-word;
            position: relative;
            line-height: 1.5;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            backdrop-filter: blur(5px);
        }

        .message-user .message-bubble {
            background: linear-gradient(135deg, var(--ktun-red) 0%, var(--ktun-red-light) 100%);
            color: white;
            border-bottom-right-radius: 8px;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .message-bot .message-bubble {
            background: rgba(255, 255, 255, 0.9);
            color: var(--ktun-dark-gray);
            border: 1px solid rgba(196, 30, 58, 0.2);
            border-bottom-left-radius: 8px;
            position: relative;
            backdrop-filter: blur(5px);
        }

        .message-bot .message-bubble::before {
            content: '';
            position: absolute;
            left: -1px;
            top: 0;
            width: 4px;
            height: 100%;
            background: var(--ktun-red);
            border-radius: 2px 0 0 2px;
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 8px;
            font-weight: 400;
        }

        .message-user .message-time {
            text-align: right;
            color: rgba(255,255,255,0.8);
        }

        .message-bot .message-time {
            color: #6c757d;
        }

        .response-time {
            font-size: 0.7rem;
            opacity: 0.6;
            font-style: italic;
            margin-top: 2px;
        }

        .chat-input-container {
            padding: 25px;
            background: linear-gradient(rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9)),
                        url('/images/background.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            box-shadow: 0 -4px 20px rgba(196, 30, 58, 0.1);
            flex-shrink: 0;
            border-top: 1px solid rgba(196, 30, 58, 0.1);
        }

        .input-group {
            position: relative;
            max-width: 100%;
        }

        #messageInput {
            border: 2px solid #e9ecef;
            border-radius: 30px;
            padding: 18px 65px 18px 24px;
            font-size: 1rem;
            width: 100%;
            resize: none;
            transition: all 0.3s ease;
            outline: none;
            background: rgba(248, 249, 250, 0.8);
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        #messageInput:focus {
            border-color: var(--ktun-red);
            box-shadow: 0 0 0 0.2rem rgba(196, 30, 58, 0.25);
            background: white;
        }

        #messageInput::placeholder {
            color: #6c757d;
            font-style: italic;
        }

        #sendButton {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, var(--ktun-red) 0%, var(--ktun-red-light) 100%);
            border: none;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            color: white;
            transition: all 0.3s ease;
            cursor: pointer;
            box-shadow: 0 3px 15px rgba(196, 30, 58, 0.3);
        }

        #sendButton:hover:not(:disabled) {
            transform: translateY(-50%) scale(1.05);
            box-shadow: 0 4px 20px rgba(196, 30, 58, 0.4);
        }

        #sendButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: translateY(-50%);
        }

        .typing-indicator {
            display: none;
            margin-bottom: 25px;
        }

        .typing-indicator.show {
            display: flex;
            justify-content: flex-start;
        }

        .typing-bubble {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(196, 30, 58, 0.2);
            border-radius: 20px;
            border-bottom-left-radius: 8px;
            padding: 18px 24px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            position: relative;
        }

        .typing-bubble::before {
            content: '';
            position: absolute;
            left: -1px;
            top: 0;
            width: 4px;
            height: 100%;
            background: var(--ktun-red);
            border-radius: 2px 0 0 2px;
        }

        .typing-dots {
            display: flex;
            gap: 6px;
        }

        .typing-dot {
            width: 10px;
            height: 10px;
            background: var(--ktun-red);
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        @@keyframes typing {
            0%, 80%, 100% { 
                transform: scale(0.8); 
                opacity: 0.5; 
            }
            40% { 
                transform: scale(1.2); 
                opacity: 1; 
            }
        }

        .error-message {
            background: linear-gradient(135deg, #f8d7da 0%, #f1aeb5 100%);
            color: #721c24;
            padding: 15px 20px;
            border-radius: 10px;
            margin: 15px 25px;
            border: 1px solid #f5c6cb;
            box-shadow: 0 3px 15px rgba(114, 28, 36, 0.1);
        }

        .welcome-message {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            margin: 20px 0;
            padding: 20px;
            background: rgba(196, 30, 58, 0.05);
            border-radius: 15px;
            border: 1px dashed rgba(196, 30, 58, 0.2);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .chat-header { 
                padding: 12px 15px;
            }
            .chat-header h1 { 
                font-size: 1.3rem; 
                margin-left: 80px;
            }
            .header-logo {
                width: 55px;
                height: 55px;
            }
            .header-logo img {
                width: 45px;
                height: 45px;
            }
            .message-bubble { 
                max-width: 88%; 
            }
            .chat-messages { 
                padding: 20px 15px; 
            }
            .chat-input-container { 
                padding: 20px 15px; 
            }
        }

        @@media (max-width: 480px) {
            .chat-header {
                padding: 10px 15px;
            }
            .chat-header h1 {
                font-size: 1.1rem;
                margin-left: 75px;
            }
            .header-logo {
                width: 50px;
                height: 50px;
                left: 15px;
            }
            .header-logo img {
                width: 40px;
                height: 40px;
            }
            .message-bubble {
                padding: 15px 18px;
            }
        }

        /* Scrollbar styling */
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--ktun-red);
            border-radius: 4px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: var(--ktun-red-dark);
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Header -->
        <div class="chat-header">
            <div class="header-logo">
                <!-- KTÜN Logo -->
                <img src="/images/logo.jpg" alt="KTÜN Logo" onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=&quot;width: 50px; height: 50px; background: var(--ktun-red); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 18px;&quot;>KTÜN</div>'" />
            </div>
            <h1>
                KTÜN Öğretim Yönetmeliği Asistanı
                <span class="status-indicator status-online" id="statusIndicator"></span>
            </h1>
            <div class="subtitle">Konya Teknik Üniversitesi • Önlisans ve Lisans Eğitim Öğretim ve Sınav Yönetmeliği Danışman Sistemi</div>
        </div>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i>
                @Model.ErrorMessage
            </div>
        }

        <!-- Messages -->
        <div class="chat-messages" id="messagesContainer">
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.IsUser ? "message-user" : "message-bot")">
                    <div class="message-bubble">
                        @message.Content
                        <div class="message-time">
                            @message.Timestamp.ToString("HH:mm")
                        </div>
                    </div>
                </div>
            }

            
            <!-- Typing Indicator -->
            <div class="typing-indicator" id="typingIndicator">
                <div class="typing-bubble">
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                    <span style="margin-left: 15px; color: var(--ktun-red); font-weight: 500;">Cevap hazırlanıyor...</span>
                </div>
            </div>
        </div>

        <!-- Input -->
        <div class="chat-input-container">
            <div class="input-group">
                <textarea 
                    id="messageInput" 
                    placeholder="Öğretim Yönetmeliği ile ilgili sorunuzu yazın... (örn: üstten ders alma şartları nelerdir?)"
                    rows="1"
                    maxlength="1000"></textarea>
                <button id="sendButton" type="button" title="Gönder">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let isLoading = false;
        let conversationId = 'ktun-conv-' + Date.now();

        // DOM elements
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const messagesContainer = document.getElementById('messagesContainer');
        const typingIndicator = document.getElementById('typingIndicator');
        const statusIndicator = document.getElementById('statusIndicator');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            messageInput.focus();
            checkApiHealth();
            autoResizeTextarea();
            scrollToBottom();
            
            // Welcome sound simulation
            setTimeout(() => {
                console.log('🎓 KTÜN Mevzuat Chat Asistanı hazır!');
            }, 500);
        });

        // Auto-resize textarea
        function autoResizeTextarea() {
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
        }

        // Send message on Enter (Shift+Enter for new line)
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Send button click
        sendButton.addEventListener('click', sendMessage);

        // Send message function
        async function sendMessage() {
            const question = messageInput.value.trim();
            
            if (!question || isLoading) return;

            // Add user message to UI
            addMessage(question, true);
            messageInput.value = '';
            messageInput.style.height = 'auto';
            
            // Show typing indicator
            showTypingIndicator();
            setLoading(true);

            try {
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        question: question,
                        conversationId: conversationId
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Add bot response
                    const responseText = data.answer;
                    const responseTime = data.responseTime;
                    
                    addMessage(responseText, false, responseTime);
                } else {
                    // Add error message
                    addMessage(`❌ Sistem Hatası: ${data.error}`, false);
                }

            } catch (error) {
                console.error('Error:', error);
                addMessage('❌ Bağlantı hatası oluştu. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.', false);
            } finally {
                hideTypingIndicator();
                setLoading(false);
                messageInput.focus();
            }
        }

        // Add message to chat
        function addMessage(content, isUser, responseTime = null) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'message-user' : 'message-bot'}`;
            
            const now = new Date();
            const timeString = now.toLocaleTimeString('tr-TR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            const responseTimeHtml = responseTime ? 
                `<div class="response-time">⚡ Yanıt süresi: ${responseTime}s</div>` : '';

            messageDiv.innerHTML = `
                <div class="message-bubble">
                    ${content}
                    <div class="message-time">
                        ${timeString}
                        ${responseTimeHtml}
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        // Show/hide typing indicator
        function showTypingIndicator() {
            typingIndicator.classList.add('show');
            scrollToBottom();
        }

        function hideTypingIndicator() {
            typingIndicator.classList.remove('show');
        }

        // Set loading state
        function setLoading(loading) {
            isLoading = loading;
            sendButton.disabled = loading;
            messageInput.disabled = loading;
            
            if (loading) {
                sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                messageInput.placeholder = 'Lütfen bekleyin, cevabınız hazırlanıyor...';
            } else {
                sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
                messageInput.placeholder = 'Üniversite mevzuatı ile ilgili sorunuzu yazın...';
            }
        }

        // Scroll to bottom
        function scrollToBottom() {
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }

        // Check API health
        async function checkApiHealth() {
            try {
                const response = await fetch('/Home/CheckHealth');
                const health = await response.json();
                
                if (health.models_loaded) {
                    statusIndicator.className = 'status-indicator status-online';
                    statusIndicator.title = 'Sistem aktif ve hazır';
                } else {
                    statusIndicator.className = 'status-indicator status-offline';
                    statusIndicator.title = 'Sistem yüklenemiyor';
                }
            } catch {
                statusIndicator.className = 'status-indicator status-offline';
                statusIndicator.title = 'Bağlantı hatası';
            }
        }

        // Health check every 60 seconds
        setInterval(checkApiHealth, 60000);

        // Add some university-specific quick actions
        function addQuickQuestion(question) {
            messageInput.value = question;
            messageInput.focus();
            autoResizeTextarea();
        }

        // Log for debugging
        console.log('🎓 KTÜN Mevzuat Chat Asistanı yüklendi');
        console.log('🔗 API Bağlantısı kontrol ediliyor...');
    </script>
</body>
</html>